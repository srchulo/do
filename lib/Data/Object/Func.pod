
=encoding utf8

=head1 NAME

Data::Object::Func

=cut

=head1 ABSTRACT

Data-Object Function-Object Class

=cut

=head1 SYNOPSIS

  use Data::Object::Func;

=cut

=head1 DESCRIPTION

This package is an abstract base class for function classes. This package
inherits all behavior from L<Data::Object::Base>.

=head1 ROLES

This package assumes all behavior from the follow roles:

L<Data::Object::Role::Throwable>

=cut

=head1 METHODS

This package implements the following methods.

=cut

=head2 configure

  configure(ClassName $arg1, Any @args) : HashRef

Converts positional args to named args.

=over 4

=item configure example

  my $configure = $func->configure();

=back

=cut

=head2 execute

  execute() : Object

Executes the function logic and returns the result.

=over 4

=item execute example

  my $func = Data::Object::Func->new();

  my $result = $func->execute;

=back

=cut

=head2 mapping

  mapping() : (Str)

Returns the ordered list of named function object arguments.

=over 4

=item mapping example

  my @data = $func->mapping;

=back

=cut

=head2 recurse

  recurse(Object $arg1, Any @args) : Any

Recurses into the function object.

=over 4

=item recurse example

  my $recurse = $func->recurse();

=back

=cut

=head2 unpack

  unpack() : (Any)

Returns a list of positional args from the named args.

=over 4

=item unpack example

  my $unpack = $func->unpack();

=back

=cut

=head1 AUTHOR

Al Newkirk, C<awncorp@cpan.org>

=head1 LICENSE

Copyright (C) 2011-2019, Al Newkirk, et al.

This is free software; you can redistribute it and/or modify it under the same
terms as the Perl 5 programming language system itself.

=head1 PROJECT

L<On GitHub|https://github.com/iamalnewkirk/do>

L<Initiatives|https://github.com/iamalnewkirk/do/projects>

L<Contributing|https://github.com/iamalnewkirk/do/blob/master/CONTRIBUTE.mkdn>

L<Reporting|https://github.com/iamalnewkirk/do/issues>

=head1 SEE ALSO

To get the most out of this distribution, consider reading the following:

L<Data::Object::Class>

L<Data::Object::Role>

L<Data::Object::Rule>

L<Data::Object::Library>

L<Data::Object::Signatures>

=cut