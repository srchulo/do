
=encoding utf8

=head1 NAME

Data::Object::Any

=cut

=head1 ABSTRACT

Data-Object Any Class

=cut

=head1 SYNOPSIS

  use Data::Object::Any;

  my $any = Data::Object::Any->new(\*main);

=cut

=head1 DESCRIPTION

Data::Object::Any provides routines for operating on any Perl 5 data type.

=cut

=head1 METHODS

This package implements the following methods.

=cut

=head2 defined

  defined() : NumObject

The defined method returns truthy for defined data.

=over 4

=item defined example

  my $defined = $self->defined();

=back

=cut

=head2 eq

  eq(Any $arg1) : NumObject

The eq method returns truthy if argument and object data are equal.

=over 4

=item eq example

  my $eq = $self->eq();

=back

=cut

=head2 ge

  ge(Any $arg1) : NumObject

The ge method returns truthy if argument is greater or equal to the object data.

=over 4

=item ge example

  my $ge = $self->ge();

=back

=cut

=head2 gt

  gt(Any $arg1) : NumObject

The gt method returns truthy if argument is greater then the object data.

=over 4

=item gt example

  my $gt = $self->gt();

=back

=cut

=head2 le

  le(Any $arg1) : NumObject

The le method returns truthy if argument is lesser or equal to the object data.

=over 4

=item le example

  my $le = $self->le();

=back

=cut

=head2 lt

  lt(Any $arg1) : NumObject

The lt method returns truthy if argument is lesser than the object data.

=over 4

=item lt example

  my $lt = $self->lt();

=back

=cut

=head2 ne

  ne(Any $arg1) : NumObject

The ne method returns truthy if argument and object data are not equal.

=over 4

=item ne example

  my $ne = $self->ne();

=back

=cut

=head2 roles

  roles() : ArrayRef

The roles method returns consumed roles.

=over 4

=item roles example

  my $roles = $any->roles();

=back

=cut

=head2 rules

  rules() : ArrayRef

The rules method returns consumed rules.

=over 4

=item rules example

  my $rules = $any->rules();

=back

=cut

=head1 ROLES

This package inherits all behavior from the folowing role(s):

=cut

=over 4

=item *

L<Data::Object::Role::Detract>

=item *

L<Data::Object::Role::Dumper>

=item *

L<Data::Object::Role::Output>

=item *

L<Data::Object::Role::Throwable>

=back

=head1 RULES

This package adheres to the requirements in the folowing rule(s):

=cut

=over 4

=item *

L<Data::Object::Rule::Comparison>

=item *

L<Data::Object::Rule::Defined>

=back
