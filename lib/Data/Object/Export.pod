
=encoding utf8

=head1 NAME

Data::Object::Export

=cut

=head1 ABSTRACT

Data-Object Exportable Functions

=cut

=head1 SYNOPSIS

  use Data::Object::Export 'cast';

  my $array = cast []; # Data::Object::Array

=cut

=head1 DESCRIPTION

Data::Object::Export is an exporter that provides various useful utility
functions and function-bundles.

=cut

=head1 EXPORTS

This package can export the following functions.

=cut

=head2 all

  use Data::Object::Export ':all';

The all export tag will export all exportable functions.

=cut

=head2 core

  use Data::Object::Export ':core';

The core export tag will export the exportable functions C<cast>, C<codify>,
C<const>, C<deduce>, C<deduce_deep>, C<deduce_type>, C<detract>,
C<detract_deep>, C<dispatch>, C<dump>, C<immutable>, C<load>, C<prototype>,
and C<throw> exclusively.


=cut

=head2 data

  use Data::Object::Export ':data';

The data export tag will export the exportable functions C<data_any>,
C<data_array>, C<data_code>, C<data_float>, C<data_hash>, C<data_integer>,
C<data_number>, C<data_regexp>, C<data_scalar>, C<data_string>, and
C<data_undef>.

=cut

=head2 plus

  use Data::Object::Export ':plus';

The plus export tag will export the exportable functions C<carp>, C<confess>
C<cluck> C<croak>, C<class_file>, C<class_name>, C<class_path>, C<library>,
C<namespace>, C<path_class>, C<path_name>, C<registry>, and C<reify>.

=cut

=head2 type

  use Data::Object::Export ':type';

The type export tag will export the exportable functions C<type_any>,
C<type_array>, C<type_code>, C<type_float>, C<type_hash>, C<type_integer>,
C<type_number>, C<type_regexp>, C<type_scalar>, C<type_string>, and
C<type_undef>.

=cut

=head2 vars

  use Data::Object::Export ':vars';

The vars export tag will export the exportable variable C<$dispatch>.

=cut

=head1 FUNCTIONS

This package implements the following functions.

=cut

=head2 do

  # given file syntax

  do 'file.pl'

  # given block syntax

  do { @{"${class}::ISA"} }

  # given func-args syntax

  do('any', [1..4]); # Data::Object::Any

The do function is a special constructor function that is automatically
exported into the consuming package. It overloads and extends the core C<do>
function, supporting the core functionality and adding a new feature, and
exists to dispatch to exportable Data-Object functions and other dispatchers.

=cut

=head2 data_json

  # given $string

  my $data = data_json($string);

  # given $data

  my $string = data_json($data);

The data_json function encodes Perl data to JSON or decodes JSON strings to
Perl.

=cut

=head2 data_path

  # given $filepath

  my $path = data_path($filepath);

The data_path function returns a L<Data::Object::Path> object for the given
path.

=cut

=head2 data_tmpl

  # given ($content, $variables)

  my $tmpl = data_tmpl;

  my $data = $tmpl->render($content, $variables);

The data_tmpl function returns a L<Data::Object::Template> object.

=cut

=head2 data_yaml

  # given $string

  my $data = data_yaml($string);

  # given $data

  my $string = data_yaml($data);

The data_yaml function encodes Perl data to YAML or decodes YAML strings to
Perl.

=cut

=head2 data_any

  # given 0;

  $object = data_any 0;
  $object->isa('Data::Object::Any');

The data_any function returns a L<Data::Object::Any> instance which
wraps the provided data type and can be used to perform operations on the data.
The C<type_any> function is an alias to this function.

=cut

=head2 data_array

  # given [2..5];

  $data = data_array [2..5];
  $data->isa('Data::Object::Array');

The data_array function returns a Data::Object::Array instance which wraps the
provided data type and can be used to perform operations on the data. The
type_array function is an alias to this function.

=cut

=head2 data_code

  # given sub { 1 };

  $object = data_code sub { 1 };
  $object->isa('Data::Object::Code');

The data_code function returns a L<Data::Object::Code> instance which wraps the
provided data type and can be used to perform operations on the data. The
C<type_code> function is an alias to this function.

=cut

=head2 data_data

  # given Foo::Bar;

  $object = data_data 'Foo::Bar';
  $object->isa('Data::Object::Data');

The data_data function returns a L<Data::Object::Data> instance which parses
pod-ish data in files and packages.

=cut

=head2 data_dispatch

  # given Foo::Bar;

  $object = data_dispatch 'Foo::Bar';
  $object->isa('Data::Object::Dispatch');

The data_dispatch function returns a L<Data::Object::Dispatch> instance which
extends L<Data::Object::Code> and dispatches to routines in the given package.

=cut

=head2 data_exception

  # given {,...};

  $object = data_exception {,...};
  $object->isa('Data::Object::Exception');

The data_exception function returns a L<Data::Object::Exception> instance which can
be thrown.

=cut

=head2 data_float

  # given 5.25;

  $object = data_float 5.25;
  $object->isa('Data::Object::Float');

The data_float function returns a L<Data::Object::Float> instance which wraps
the provided data type and can be used to perform operations on the data. The
C<type_float> function is an alias to this function.

=cut

=head2 data_hash

  # given {1..4};

  $object = data_hash {1..4};
  $object->isa('Data::Object::Hash');

The data_hash function returns a L<Data::Object::Hash> instance which wraps the
provided data type and can be used to perform operations on the data. The
C<type_hash> function is an alias to this function.

=cut

=head2 data_integer

  # given -100;

  $object = data_integer -100;
  $object->isa('Data::Object::Integer');

The data_integer function returns a L<Data::Object::Object> instance which wraps
the provided data type and can be used to perform operations on the data. The
C<type_integer> function is an alias to this function.

=cut

=head2 data_number

  # given 100;

  $object = data_number 100;
  $object->isa('Data::Object::Number');

The data_number function returns a L<Data::Object::Number> instance which wraps
the provided data type and can be used to perform operations on the data. The
C<type_number> function is an alias to this function.

=cut

=head2 data_regexp

  # given qr/test/;

  $object = data_regexp qr/test/;
  $object->isa('Data::Object::Regexp');

The data_regexp function returns a L<Data::Object::Regexp> instance which wraps
the provided data type and can be used to perform operations on the data. The
C<type_regexp> function is an alias to this function.

=cut

=head2 data_scalar

  # given \*main;

  $object = data_scalar \*main;
  $object->isa('Data::Object::Scalar');

The data_scalar function returns a L<Data::Object::Scalar> instance which wraps
the provided data type and can be used to perform operations on the data. The
C<type_scalar> function is an alias to this function.

=cut

=head2 data_space

  # given Foo::Bar;

  $object = data_space 'Foo::Bar';
  $object->isa('Data::Object::Space');

The data_space function returns a L<Data::Object::Space> instance which
provides methods for operating on package and namespaces.

=cut

=head2 data_string

  # given 'abcdefghi';

  $object = data_string 'abcdefghi';
  $object->isa('Data::Object::String');

The data_string function returns a L<Data::Object::String> instance which wraps
the provided data type and can be used to perform operations on the data. The
C<type_string> function is an alias to this function.

=cut

=head2 data_undef

  # given undef;

  $object = data_undef undef;
  $object->isa('Data::Object::Undef');

The data_undef function returns a L<Data::Object::Undef> instance which wraps
the provided data type and can be used to perform operations on the data. The
C<type_undef> function is an alias to this function.

=cut

=head2 immutable

  # given [1,2,3];

  $object = immutable data_array [1,2,3];
  $object->isa('Data::Object::Array); # via Data::Object::Immutable

The immutable function makes the data type object provided immutable. This
function loads L<Data::Object::Immutable> and returns the object provided as an
argument.

=cut

=head2 library

  library; # Type::Library

The library function returns the default L<Type::Library> object where all core
type constraints are registered.

=cut

=head2 prototype

  # given ('$name' => [is => 'ro']);

  my $proto  = data_prototype '$name' => [is => 'ro'];
  my $class  = $proto->create; # via Data::Object::Prototype
  my $object = $class->new(name => '...');

The prototype function returns a prototype object which can be used to
generate classes, objects, and derivatives. This function loads
L<Data::Object::Prototype> and returns an object based on the arguments
provided.

=cut

=head2 registry

  registry; # Data::Object::Registry

The registry function returns the registry singleton object where mapping
between namespaces and type libraries are registered.

=cut

=head2 reify

  # given 'Str';

  $type = reify 'Str'; # Type::Tiny

The reify function will construct a L<Type::Tiny> type constraint object for
the type expression provided.

=cut

=head2 throw

  # given $message;

  throw $message; # An exception (...) was thrown in -e at line 1

The throw function will dynamically load and throw an exception object. This
function takes all arguments accepted by the L<Data::Object::Exception> class.

=cut

=head2 cast

  # given [1..4]

  my $array = cast([1..4]); # Data::Object::Array

The cast function returns a Data::Object for the data provided. If the data
passed is blessed then that same object will be returned.

=cut

=head2 const

  # given 1.098765;

  const VERSION => 1.098765;

The const function creates a constant function using the name and expression
supplied to it. A constant function is a function that does not accept any
arguments and whose result(s) are deterministic.

=cut

=head2 codify

  my $coderef = codify('$a + $b + $c', 1, 2);

  # $coderef->(3) returns 6

The codify function returns a parameterized coderef from a string.

=cut

=head2 dispatch

  my $dispatch = dispatch('main');

  # $dispatch->('run') calls main::run

The dispatch function return a Data::Object::Dispatch object which is a handle
that let's you call into other packages.

=cut

=head2 dump

  # given {1..8}

  say dump {1..8};

The dump function returns a string representation of the data passed.

=cut

=head2 load

  # given 'List::Util';

  $package = load 'List::Util'; # List::Util if loaded

The load function attempts to dynamically load a module and either dies or
returns the package name of the loaded module.

=cut

=head2 namespace

  # given Types::Standard

  namespace('App', 'Types::Standard');

The namespace function registers a type library with a namespace in the
registry so that typed operations know where to look for type context-specific
constraints.

=cut

=head2 deduce

  # given qr/\w+/;

  $object = deduce qr/\w+/;
  $object->isa('Data::Object::Regexp');

The deduce function returns a data type object instance based upon the deduced
type of data provided.

=cut

=head2 deduce_defined

  # given $data

  deduce_defined($data);

The deduce_defined function returns truthy if the argument is defined.

=cut

=head2 deduce_blessed

  # given $data

  deduce_blessed($data);

The deduce_blessed function returns truthy if the argument is blessed.

=cut

=head2 deduce_references

  # given $data

  deduce_references($data);

The deduce_references function returns a Data::Object object based on the type
of argument reference provided.

=cut

=head2 deduce_numberlike

  # given $data

  deduce_numberlike($data);

The deduce_numberlike function returns truthy if the argument is numberlike.

=cut

=head2 deduce_stringlike

  # given $data

  deduce_stringlike($data);

The deduce_stringlike function returns truthy if the argument is stringlike.

=cut

=head2 deduce_deep

  # given {1,2,3,{4,5,6,[-1]}}

  $deep = deduce_deep {1,2,3,{4,5,6,[-1]}};

  # Data::Object::Hash {
  #   1 => Data::Object::Number ( 2 ),
  #   3 => Data::Object::Hash {
  #      4 => Data::Object::Number ( 5 ),
  #      6 => Data::Object::Array [ Data::Object::Integer ( -1 ) ],
  #   },
  # }

The deduce_deep function returns a data type object. If the data provided is
complex, this function traverses the data converting all nested data to objects.
Note: Blessed objects are not traversed.

=cut

=head2 deduce_type

  # given qr/\w+/;

  $type = deduce_type qr/\w+/; # REGEXP

The deduce_type function returns a data type description for the type of data
provided, represented as a string in capital letters.

=cut

=head2 detract

  # given bless({1..4}, 'Data::Object::Hash');

  $object = detract $object; # {1..4}

The detract function returns a value of native type, based upon the underlying
reference of the data type object provided.

=cut

=head2 detract_deep

  # given {1,2,3,{4,5,6,[-1, 99, bless({}), sub { 123 }]}};

  my $object = deduce_deep $object;
  my $revert = detract_deep $object; # produces ...

  # {
  #   '1' => 2,
  #   '3' => {
  #     '4' => 5,
  #     '6' => [ -1, 99, bless({}, 'main'), sub { ... } ]
  #     }
  # }

The detract_deep function returns a value of native type. If the data provided
is complex, this function traverses the data converting all nested data type
objects into native values using the objects underlying reference. Note:
Blessed objects are not traversed.

=cut

=head2 class_file

  # given 'Foo::Bar'

  class_file('Foo::Bar'); # foo_bar

The class_file function convertss a class name to a class file.

=cut

=head2 class_name

  # given 'foo-bar'

  class_name('foo-bar'); # Foo::Bar

The class_name function converts a string to a class name.

=cut

=head2 class_path

  # given 'Foo::BarBaz'

  class_path('Foo::BarBaz'); 'Foo/BarBaz.pm'

The class_path function converts a class name to a class file.

=cut

=head2 path_class

  # given 'foo/bar_baz'

  path_class('foo/bar_baz'); # Foo::BarBaz

The path_class function converts a path to a class name.

=cut

=head2 path_name

  # given 'Foo::BarBaz'

  path_name('Foo::BarBaz'); # foo-bar_baz

The path_name function converts a class name to a path.

=cut
