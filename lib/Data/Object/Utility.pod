
=encoding utf8

=head1 NAME

Data::Object::Utility

=cut

=head1 ABSTRACT

Data-Object Utility Functions

=cut

=head1 SYNOPSIS

  use Data::Object::Utility;

  my $array = Data::Object::Utility::Deduce []; # Data::Object::Array
  my $value = Data::Object::Utility::Detract $array; # [,...]

=cut

=head1 DESCRIPTION

This package provides a suite of utility functions designed to be used
internally across core packages.

=cut

=head1 LIBRARIES

This package uses type constraints defined by:

L<Data::Object::Library>

=cut

=head1 FUNCTIONS

This package implements the following functions.

=cut

=head2 deduce

  Deduce(Any $arg1) : Any

The C<Deduce> function returns a data type object instance based upon the
deduced type of data provided.

=over 4

=item Deduce example

  # given ...

  Data::Object::Utility::Deduce(...);

=back

=cut

=head2 deduceblessed

  DeduceBlessed(Any $arg1) : Int

The C<DeduceBlessed> function returns truthy if the argument is blessed.

=over 4

=item DeduceBlessed example

  # given ...

  Data::Object::Utility::DeduceBlessed(...);

=back

=cut

=head2 deducedeep

  DeduceDeep(Any $arg1) : Any

The C<DeduceDeep> function returns a data type object. If the data provided is
complex, this function traverses the data converting all nested data to
objects. Note: Blessed objects are not traversed.

=over 4

=item DeduceDeep example

  # given ...

  Data::Object::Utility::DeduceDeep(...);

=back

=cut

=head2 deducedefined

  DeduceDefined(Any $arg1) : Int

The C<DeduceDefined> function returns truthy if the argument is defined.

=over 4

=item DeduceDefined example

  # given ...

  Data::Object::Utility::DeduceDefined(...);

=back

=cut

=head2 deducenumberlike

  DeduceNumberlike(Any $arg1) : Int

The C<DeduceNumberlike> function returns truthy if the argument is numberlike.

=over 4

=item DeduceNumberlike example

  # given ...

  Data::Object::Utility::DeduceNumberlike(...);

=back

=cut

=head2 deducereferences

  DeduceReferences(Any $arg1) : Int

The C<DeduceReferences> function returns a data object based on the type of
argument reference provided.

=over 4

=item DeduceReferences example

  # given ...

  Data::Object::Utility::DeduceReferences(...);

=back

=cut

=head2 deducestringlike

  DeduceStringLike(Any $arg1) : Int

The C<DeduceStringLike> function returns truthy if the argument is stringlike.

=over 4

=item DeduceStringLike example

  # given ...

  Data::Object::Utility::DeduceStringLike(...);

=back

=cut

=head2 detract

  Detract(Any $arg1) : Any

The C<Detract> function returns a value of native type, based upon the
underlying reference of the data type object provided.

=over 4

=item Detract example

  # given ...

  Data::Object::Utility::Detract(...);

=back

=cut

=head2 detractdeep

  DetractDeep(Any $arg1) : Any

The C<DetractDeep> function returns a value of native type. If the data
provided is complex, this function traverses the data converting all nested
data type objects into native values using the objects underlying reference.
Note: Blessed objects are not traversed.

=over 4

=item DetractDeep example

  # given ...

  Data::Object::Utility::DetractDeep(...);

=back

=cut

=head2 typearray

  TypeArray(ArrayRef $arg1) : ArrayObject

The C<TypeArray> function returns a L<Data::Object::Array> instance which wraps
the provided data type and can be used to perform operations on the data.

=over 4

=item TypeArray example

  # given ...

  Data::Object::Utility::TypeArray(...);

=back

=cut

=head2 typecode

  TypeCode(CodeRef $arg1) : CodeObject

The C<TypeCode> function returns a L<Data::Object::Code> instance which wraps
the provided data type and can be used to perform operations on the data.

=over 4

=item TypeCode example

  # given ...

  Data::Object::Utility::TypeCode(...);

=back

=cut

=head2 typedata

  TypeData(Str $arg1) : Object

The C<TypeData> function returns a L<Data::Object::Data> instance which parses
pod-ish data in files and packages.

=over 4

=item TypeData example

  # given ...

  Data::Object::Utility::TypeData(...);

=back

=cut

=head2 typedispatch

  TypeDispatch(Str $arg1) : Object

The C<TypeDispatch> function return a L<Data::Object::Dispatch> object which is
a handle that let's you call into other packages.

=over 4

=item TypeDispatch example

  # given ...

  Data::Object::Utility::TypeDispatch(...);

=back

=cut

=head2 typeexception

  TypeException(Any @args) : Object

The C<TypeException> function returns a L<Data::Object::Exception> instance
which can be thrown.

=over 4

=item TypeException example

  # given ...

  Data::Object::Utility::TypeException(...);

=back

=cut

=head2 typefloat

  TypeFloat(Str $arg1) : FloatObject

The C<TypeFloat> function returns a L<Data::Object::Float> instance which wraps
the provided data type and can be used to perform operations on the data.

=over 4

=item TypeFloat example

  # given ...

  Data::Object::Utility::TypeFloat(...);

=back

=cut

=head2 typehash

  TypeHash(HashRef $arg1) : HashObject

The C<TypeHash> function returns a L<Data::Object::Hash> instance which wraps
the provided data type and can be used to perform operations on the data.

=over 4

=item TypeHash example

  # given ...

  Data::Object::Utility::TypeHash(...);

=back

=cut

=head2 typename

  TypeName(Any $arg1) : Str

The C<TypeName> function returns a data type description for the type of data
provided, represented as a string in capital letters.

=over 4

=item TypeName example

  # given ...

  Data::Object::Utility::TypeName(...);

=back

=cut

=head2 typenumber

  TypeNumber(Num $arg1) : NumObject

The C<TypeNumber> function returns a L<Data::Object::Number> instance which
wraps the provided data type and can be used to perform operations on the data.

=over 4

=item TypeNumber example

  # given ...

  Data::Object::Utility::TypeNumber(...);

=back

=cut

=head2 typeregexp

  TypeRegexp(RegexpRef $arg1) : RegexpObject

The C<TypeRegexp> function returns a L<Data::Object::Regexp> instance which
wraps the provided data type and can be used to perform operations on the data.

=over 4

=item TypeRegexp example

  # given ...

  Data::Object::Utility::TypeRegexp(...);

=back

=cut

=head2 typescalar

  TypeScalar(Any $arg1) : ScalarObject

The C<TypeScalar> function returns a L<Data::Object::Scalar> instance which
wraps the provided data type and can be used to perform operations on the data.

=over 4

=item TypeScalar example

  # given ...

  Data::Object::Utility::TypeScalar(...);

=back

=cut

=head2 typespace

  TypeSpace(Str $arg1) : Object

The C<TypeSpace> function returns a L<Data::Object::Space> instance which
provides methods for operating on package and namespaces.

=over 4

=item TypeSpace example

  # given ...

  Data::Object::Utility::TypeSpace(...);

=back

=cut

=head2 typestring

  TypeString(Str $arg1) : StrObject

The C<TypeString> function returns a L<Data::Object::String> instance which
wraps the provided data type and can be used to perform operations on the data.

=over 4

=item TypeString example

  # given ...

  Data::Object::Utility::TypeString(...);

=back

=cut

=head2 typeundef

  TypeUndef(Undef $arg1) : UndefObject

The C<TypeUndef> function returns a L<Data::Object::Undef> instance which wraps
the provided data type and can be used to perform operations on the data.

=over 4

=item TypeUndef example

  # given ...

  Data::Object::Utility::TypeUndef(...);

=back

=cut

=head1 CREDITS

Al Newkirk, C<awncorp@cpan.org>, C<+284>

Anthony Brummett, C<abrummet@genome.wustl.edu>, C<+10>

=cut

=head1 AUTHOR

Al Newkirk, C<awncorp@cpan.org>

=head1 LICENSE

Copyright (C) 2011-2019, Al Newkirk, et al.

This is free software; you can redistribute it and/or modify it under the same
terms as the Perl 5 programming language system itself.

=head1 PROJECT

L<GitHub|https://github.com/iamalnewkirk/do>

L<Projects|https://github.com/iamalnewkirk/do/projects>

L<Milestones|https://github.com/iamalnewkirk/do/milestones>

L<Contributing|https://github.com/iamalnewkirk/do/blob/master/CONTRIBUTE.mkdn>

L<Issues|https://github.com/iamalnewkirk/do/issues>

=head1 SEE ALSO

To get the most out of this distribution, consider reading the following:

L<Do>

L<Data::Object>

L<Data::Object::Class>

L<Data::Object::ClassHas>

L<Data::Object::Role>

L<Data::Object::RoleHas>

L<Data::Object::Library>

=cut