#!/usr/bin/env perl

use strict;
use warnings;

use feature 'say';

sub is_major {
  my ($text) = @_;

  # return true if major
  return $text =~ /major/i;
}

sub up_major {
  my (@parts) = @_;

  # bump major
  return version($parts[0] + 1, 0, 0);
}

sub is_minor {
  my ($text) = @_;

  # return true if minor
  return $text =~ /minor/i;
}

sub up_minor {
  my (@parts) = @_;

  # bump minor
  return version($parts[0], $parts[1] + 1, $parts[2]);
}

sub is_patch {
  my ($text) = @_;

  # return true if patch
  return $text =~ /patch/i;
}

sub up_patch {
  my (@parts) = @_;

  # bump patch
  return version($parts[0], $parts[1], $parts[2] + 1);
}

sub version {
  my ($major, $minor, $patch) = @_;

  ($minor, $patch) = calculate($minor, $patch);
  ($major, $minor) = calculate($major, $minor);

  # return version
  return ($major, $minor, $patch);
}

sub calculate {
  my ($left, $right) = @_;

  if ($right > 9) {
    my (@quotient) = split /\./, $right / 10;

    ($left, $right) = ($left + $quotient[0], $quotient[1] || 0);
  }

  # return version parts
  return ($left, $right);
}

sub render {
  my ($version, $commands) = @_;

  my @parts = parts($version);

  for my $command (@$commands) {
    if (is_major($command)) {
      @parts = up_major(@parts); last;
    }
    if (is_minor($command)) {
      @parts = up_minor(@parts); next;
    }
    if (is_patch($command)) {
      @parts = up_patch(@parts); next;
    }
  }

  # return new version
  say sprintf('%d.%d%d',  @parts);
}

sub commands {
  my ($parent) = @_;

  my $branch = qx(git rev-parse --abbrev-ref HEAD);

  chomp $branch;

  $parent ||= 'release';

  my @commits = map { chomp; $_ } qx(git log $parent..$branch --oneline);
  my $pattern = '(major|minor|patch):';

  return [map { /$pattern/i } grep /$pattern/i, @commits];
}

sub parts {
  my ($version) = @_;

  # return version parts
  return (sprintf('%.2f', $version) =~ /^(\d+)\.(\d)(\d)$/);
}

# return version based on args
render(do('VERSION'), commands(@ARGV));
